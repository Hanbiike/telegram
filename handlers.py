"""Aiogram handlers for the finance tracking bot.

Commands:
- /start - greet and ensure user exists
- /add_expense <amount> <category> [description]
- /add_income <amount> <category> [description]
- /balance - show current balance
- /stats day|week|month - show stats summary
- /delete_last - delete last transaction
- /help - show help
"""

from __future__ import annotations

from typing import Optional, Tuple, List

from aiogram import Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from db import Database
from voice import (
    transcribe_file_to_text,
    parse_transaction_text,
    Transaction as VoiceTransaction,
)
from aiogram.types import Voice as TgVoice, Audio as TgAudio, Document as TgDocument
import tempfile
import os
import asyncio
import subprocess


router = Router()


# -------- Keyboards ---------

MAIN_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûñ –†–∞—Å—Ö–æ–¥"), KeyboardButton(text="‚ûï –î–æ—Ö–æ–¥")],
    [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [
            KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é"),
            KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"),
        ],
    ],
    resize_keyboard=True,
)

EXPENSE_CATEGORIES: List[str] = [
    "–ï–¥–∞",
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "–ñ–∏–ª—å—ë",
    "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ",
    "–°–≤—è–∑—å",
    "–ó–¥–æ—Ä–æ–≤—å–µ",
    "–û–¥–µ–∂–¥–∞",
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "–ü–æ–¥–∞—Ä–∫–∏",
    "–ü—Ä–æ—á–µ–µ",
]

INCOME_CATEGORIES: List[str] = [
    "–ó–∞—Ä–ø–ª–∞—Ç–∞",
    "–§—Ä–∏–ª–∞–Ω—Å",
    "–ü–æ–¥–∞—Ä–∫–∏",
    "–ü—Ä–æ–¥–∞–∂–∏",
    "–ü—Ä–æ—Ü–µ–Ω—Ç—ã",
    "–ö—ç—à–±—ç–∫",
    "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "–ü—Ä–µ–º–∏—è",
    "–°–æ—Ü–≤—ã–ø–ª–∞—Ç—ã",
    "–ü—Ä–æ—á–µ–µ",
]


def build_categories_kb(items: List[str]) -> ReplyKeyboardMarkup:
    rows: List[List[KeyboardButton]] = []
    row: List[KeyboardButton] = []
    for i, name in enumerate(items, start=1):
        row.append(KeyboardButton(text=name))
        if i % 2 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    # Last row: custom + cancel
    rows.append([KeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è"), KeyboardButton(text="–û—Ç–º–µ–Ω–∞")])
    return ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True, one_time_keyboard=True)


YES_NO_KB = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")], [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True,
    one_time_keyboard=True,
)


STATS_PERIOD_KB = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–µ–Ω—å"), KeyboardButton(text="–ù–µ–¥–µ–ª—è")],
        [KeyboardButton(text="–ú–µ—Å—è—Ü"), KeyboardButton(text="–ì–æ–¥")],
        [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
)


# -------- States (FSM) ---------

class ExpenseStates(StatesGroup):
    amount = State()
    category = State()
    maybe_custom_category = State()
    need_description = State()
    description = State()


class IncomeStates(StatesGroup):
    amount = State()
    category = State()
    maybe_custom_category = State()
    need_description = State()
    description = State()


class VoiceConfirmStates(StatesGroup):
    """States for confirming voice-recognized transactions."""
    confirm = State()


def _parse_add_args(args: Optional[str]) -> Tuple[float, str, Optional[str]]:
    """Parse args for add commands.

    Expected: <amount> <category> [description]
    Returns: (amount, category, description)
    """

    if not args:
        raise ValueError(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]"
        )
    parts = args.strip().split()
    if len(parts) < 2:
        raise ValueError(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]"
        )
    amount_str = parts[0].replace(",", ".")
    try:
        amount = float(amount_str)
    except ValueError as exc:
        raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º") from exc
    category = parts[1]
    description = " ".join(parts[2:]) if len(parts) > 2 else None
    if amount <= 0:
        raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    return amount, category, description


@router.message(Command("start"))
async def cmd_start(message: Message, db: Database) -> None:
    """Handle /start: ensure user and show help."""

    user = message.from_user
    assert user is not None
    name = (user.full_name or user.username or str(user.id)).strip()
    await db.ensure_user(telegram_id=user.id, name=name)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_expense <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]\n"
        "/add_income <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]\n"
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
        "/stats day|week|month ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/delete_last ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞",
        reply_markup=MAIN_KB,
    )


@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Show help message."""

    await message.answer(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add_expense <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]\n"
        "/add_income <—Å—É–º–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> [–æ–ø–∏—Å–∞–Ω–∏–µ]\n"
        "/balance\n"
        "/stats day|week|month\n"
        "/delete_last",
        reply_markup=MAIN_KB,
    )


# -------- Buttons entry points ---------

@router.message(F.text == "‚ûñ –†–∞—Å—Ö–æ–¥")
async def btn_expense(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(ExpenseStates.amount)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 250.50):",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(F.text == "‚ûï –î–æ—Ö–æ–¥")
async def btn_income(message: Message, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(IncomeStates.amount)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000):",
        reply_markup=ReplyKeyboardRemove(),
    )


@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def btn_balance(message: Message, db: Database) -> None:
    await cmd_balance(message, db)


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def btn_stats_hint(message: Message) -> None:
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", reply_markup=STATS_PERIOD_KB
    )


@router.message(F.text.in_({"–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü", "–ì–æ–¥"}))
async def btn_stats_period(message: Message, db: Database) -> None:
    text = (message.text or "").strip().lower()
    map_period = {"–¥–µ–Ω—å": "day", "–Ω–µ–¥–µ–ª—è": "week", "–º–µ—Å—è—Ü": "month", "–≥–æ–¥": "year"}
    period = map_period.get(text)
    if period is None:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥.", reply_markup=MAIN_KB)
        return
    # Reuse stats command logic
    cmd_obj = CommandObject(command="stats", args=period)
    await cmd_stats(message, cmd_obj, db)


@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é")
async def btn_delete_last(message: Message, db: Database) -> None:
    await cmd_delete_last(message, db)


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def btn_help(message: Message) -> None:
    await cmd_help(message)


@router.message(Command("add_expense"))
async def cmd_add_expense(message: Message, command: CommandObject, db: Database) -> None:
    """Add an expense transaction."""

    user = message.from_user
    assert user is not None
    try:
        amount, category, description = _parse_add_args(command.args)
    except ValueError as e:
        await message.answer(str(e))
        return
    user_id = await db.ensure_user(user.id, (user.full_name or "").strip() or str(user.id))
    await db.add_transaction(
        user_id=user_id,
        tx_type="expense",
        amount=amount,
        category=category,
        description=description,
    )
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: -{amount:.2f} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.",
        reply_markup=MAIN_KB,
    )


@router.message(Command("add_income"))
async def cmd_add_income(message: Message, command: CommandObject, db: Database) -> None:
    """Add an income transaction."""

    user = message.from_user
    assert user is not None
    try:
        amount, category, description = _parse_add_args(command.args)
    except ValueError as e:
        await message.answer(str(e))
        return
    user_id = await db.ensure_user(user.id, (user.full_name or "").strip() or str(user.id))
    await db.add_transaction(
        user_id=user_id,
        tx_type="income",
        amount=amount,
        category=category,
        description=description,
    )
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥: +{amount:.2f} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.",
        reply_markup=MAIN_KB,
    )


@router.message(Command("balance"))
async def cmd_balance(message: Message, db: Database) -> None:
    """Show current balance for the user."""

    user = message.from_user
    assert user is not None
    user_id = await db.ensure_user(user.id, (user.full_name or "").strip() or str(user.id))
    balance = await db.get_balance(user_id)
    sign = "" if balance >= 0 else "-"
    await message.answer(f"–ë–∞–ª–∞–Ω—Å: {sign}{abs(balance):.2f}", reply_markup=MAIN_KB)


@router.message(Command("stats"))
async def cmd_stats(message: Message, command: CommandObject, db: Database) -> None:
    """Show stats for period: day|week|month."""

    user = message.from_user
    assert user is not None
    period = (command.args or "").strip().lower()
    if period not in {"day", "week", "month", "year"}:
        await message.answer(
            "–£–∫–∞–∂–∏—Ç–µ –ø–µ—Ä–∏–æ–¥: /stats day|week|month|year",
            reply_markup=MAIN_KB,
        )
        return
    user_id = await db.ensure_user(user.id, (user.full_name or "").strip() or str(user.id))
    stats = await db.get_stats(user_id, period)
    income = stats["income_total"]
    expense = stats["expense_total"]
    lines = [
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:",
        f"–î–æ—Ö–æ–¥—ã: +{income:.2f}",
        f"–†–∞—Å—Ö–æ–¥—ã: -{expense:.2f}",
    ]
    # Top categories (up to 5 for brevity)
    if stats["by_category"]["income"]:
        inc_top = ", ".join(
            f"{cat}: {amt:.2f}" for cat, amt in stats["by_category"]["income"][:5]
        )
        lines.append(f"–¢–æ–ø –¥–æ—Ö–æ–¥—ã: {inc_top}")
    if stats["by_category"]["expense"]:
        exp_top = ", ".join(
            f"{cat}: {amt:.2f}" for cat, amt in stats["by_category"]["expense"][:5]
        )
        lines.append(f"–¢–æ–ø —Ä–∞—Å—Ö–æ–¥—ã: {exp_top}")
    await message.answer("\n".join(lines), reply_markup=MAIN_KB)


@router.message(Command("delete_last"))
async def cmd_delete_last(message: Message, db: Database) -> None:
    """Delete the last transaction for the user."""

    user = message.from_user
    assert user is not None
    user_id = await db.ensure_user(user.id, (user.full_name or "").strip() or str(user.id))
    ok = await db.delete_last_transaction(user_id)
    if ok:
        await message.answer("–ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=MAIN_KB)
    else:
        await message.answer("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=MAIN_KB)


# -------- Expense flow ---------

@router.message(ExpenseStates.amount)
async def expense_enter_amount(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip().replace(",", ".")
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
        return
    try:
        amount = float(text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(amount=amount)
    await state.set_state(ExpenseStates.category)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=build_categories_kb(EXPENSE_CATEGORIES),
    )


@router.message(ExpenseStates.category)
async def expense_choose_category(message: Message, state: FSMContext) -> None:
    category = (message.text or "").strip()
    if category == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
        return
    if category == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è":
        await state.set_state(ExpenseStates.maybe_custom_category)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardRemove())
        return
    # Validate category from list
    if category not in EXPENSE_CATEGORIES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è'.")
        return
    await state.update_data(category=category)
    await state.set_state(ExpenseStates.need_description)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=YES_NO_KB)


@router.message(ExpenseStates.maybe_custom_category)
async def expense_custom_category(message: Message, state: FSMContext) -> None:
    category = (message.text or "").strip()
    if not category:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(category=category)
    await state.set_state(ExpenseStates.need_description)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=YES_NO_KB)


@router.message(ExpenseStates.need_description)
async def expense_need_description(message: Message, state: FSMContext, db: Database) -> None:
    answer = (message.text or "").strip().lower()
    if answer == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
        return
    if answer == "–¥–∞":
        await state.set_state(ExpenseStates.description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
        return
    if answer == "–Ω–µ—Ç":
        data = await state.get_data()
        await state.clear()
        await _finalize_expense(message, db, data, description=None)
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.", reply_markup=YES_NO_KB)


@router.message(ExpenseStates.description)
async def expense_description(message: Message, state: FSMContext, db: Database) -> None:
    description = (message.text or "").strip()
    data = await state.get_data()
    await state.clear()
    await _finalize_expense(message, db, data, description=description or None)


async def _finalize_expense(
    message: Message, db: Database, data: dict, description: Optional[str]
) -> None:
    """Persist expense transaction using collected FSM data."""

    user = message.from_user
    assert user is not None
    amount = float(data.get("amount", 0))
    category = str(data.get("category"))
    user_id = await db.ensure_user(user.id, (user.full_name or "").strip() or str(user.id))
    await db.add_transaction(
        user_id=user_id,
        tx_type="expense",
        amount=amount,
        category=category,
        description=description,
    )
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥: -{amount:.2f} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.",
        reply_markup=MAIN_KB,
    )


# -------- Income flow ---------

@router.message(IncomeStates.amount)
async def income_enter_amount(message: Message, state: FSMContext) -> None:
    text = (message.text or "").strip().replace(",", ".")
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
        return
    try:
        amount = float(text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(amount=amount)
    await state.set_state(IncomeStates.category)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:",
        reply_markup=build_categories_kb(INCOME_CATEGORIES),
    )


@router.message(IncomeStates.category)
async def income_choose_category(message: Message, state: FSMContext) -> None:
    category = (message.text or "").strip()
    if category == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
        return
    if category == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è":
        await state.set_state(IncomeStates.maybe_custom_category)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", reply_markup=ReplyKeyboardRemove())
        return
    if category not in INCOME_CATEGORIES:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è'.")
        return
    await state.update_data(category=category)
    await state.set_state(IncomeStates.need_description)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=YES_NO_KB)


@router.message(IncomeStates.maybe_custom_category)
async def income_custom_category(message: Message, state: FSMContext) -> None:
    category = (message.text or "").strip()
    if not category:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(category=category)
    await state.set_state(IncomeStates.need_description)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=YES_NO_KB)


@router.message(IncomeStates.need_description)
async def income_need_description(message: Message, state: FSMContext, db: Database) -> None:
    answer = (message.text or "").strip().lower()
    if answer == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
        return
    if answer == "–¥–∞":
        await state.set_state(IncomeStates.description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
        return
    if answer == "–Ω–µ—Ç":
        data = await state.get_data()
        await state.clear()
        await _finalize_income(message, db, data, description=None)
        return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.", reply_markup=YES_NO_KB)


@router.message(IncomeStates.description)
async def income_description(message: Message, state: FSMContext, db: Database) -> None:
    description = (message.text or "").strip()
    data = await state.get_data()
    await state.clear()
    await _finalize_income(message, db, data, description=description or None)


async def _finalize_income(
    message: Message, db: Database, data: dict, description: Optional[str]
) -> None:
    """Persist income transaction using collected FSM data."""

    user = message.from_user
    assert user is not None
    amount = float(data.get("amount", 0))
    category = str(data.get("category"))
    user_id = await db.ensure_user(user.id, (user.full_name or "").strip() or str(user.id))
    await db.add_transaction(
        user_id=user_id,
        tx_type="income",
        amount=amount,
        category=category,
        description=description,
    )
    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω –¥–æ—Ö–æ–¥: +{amount:.2f} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.",
        reply_markup=MAIN_KB,
    )


# -------- Voice input ---------

async def _download_file(message: Message, file_id: str) -> str:
    """Download Telegram file, convert to WAV if needed, and return path."""

    bot = message.bot
    file = await bot.get_file(file_id)

    # –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (–ø–æ –ø—É—Ç–∏ —Ç–µ–ª–µ–≥–∏)
    ext = os.path.splitext(file.file_path or "")[1].lower() or ".oga"

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å
    fd, src_path = tempfile.mkstemp(suffix=ext)
    os.close(fd)
    await bot.download_file(file.file_path, destination=src_path)

    # –µ—Å–ª–∏ —ç—Ç–æ ogg/opus/oga ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ wav 16k mono
    if ext in {".oga", ".ogg", ".opus"}:
        fd, wav_path = tempfile.mkstemp(suffix=".wav")
        os.close(fd)

        # ffmpeg –∫–æ–º–∞–Ω–¥–æ–π –≤ —Ñ–æ–Ω–µ
        cmd = [
            "ffmpeg",
            "-y",                # –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
            "-i", src_path,      # –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            "-ar", "16000",      # sample rate 16kHz
            "-ac", "1",          # –º–æ–Ω–æ
            wav_path,
        ]
        proc = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.DEVNULL,
            stderr=asyncio.subprocess.DEVNULL,
        )
        await proc.wait()

        # –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        try:
            os.remove(src_path)
        except OSError:
            pass

        return wav_path

    # –µ—Å–ª–∏ —É–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return src_path


@router.message(F.voice | F.audio)
async def on_voice_or_audio(message: Message, db: Database, state: FSMContext) -> None:
    """Handle voice or audio message: transcribe and parse transaction."""

    file_id = None
    if message.voice:
        file_id = message.voice.file_id
    elif message.audio:
        file_id = message.audio.file_id
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=MAIN_KB)
        return

    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ‚Ä¶")
    try:
        path = await _download_file(message, file_id)
        text = transcribe_file_to_text(path)
    finally:
        try:
            os.remove(path)
        except Exception:
            pass

    if not text:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=MAIN_KB,
        )
        return

    vt = parse_transaction_text(text)
    if vt is None:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ —Ç–µ–∫—Å—Ç–∞. –°–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '—Ä–∞—Å—Ö–æ–¥ 200 –µ–¥–∞ –æ–±–µ–¥'",
            reply_markup=MAIN_KB,
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.set_state(VoiceConfirmStates.confirm)
    await state.update_data(
        amount=float(vt.sum),
        category=vt.category,
        tx_type=vt.type,
        description=vt.description,
        original_text=text,
    )
    
    sign = "+" if vt.type == "income" else "-"
    tx_type_ru = "–¥–æ—Ö–æ–¥" if vt.type == "income" else "—Ä–∞—Å—Ö–æ–¥"
    desc_text = f", –æ–ø–∏—Å–∞–Ω–∏–µ: {vt.description}" if vt.description else ""
    
    await message.answer(
        f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:\n"
        f"{tx_type_ru.capitalize()}: {sign}{vt.sum:.2f}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {vt.category}{desc_text}\n"
        f"–¢–µ–∫—Å—Ç: \"{text}\"\n\n"
        f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é?",
        reply_markup=YES_NO_KB,
    )


@router.message(VoiceConfirmStates.confirm)
async def voice_confirm_transaction(message: Message, state: FSMContext, db: Database) -> None:
    """Handle confirmation of voice-recognized transaction."""
    
    answer = (message.text or "").strip().lower()
    data = await state.get_data()
    
    if answer == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=MAIN_KB)
        return
    
    if answer == "–¥–∞":
        user = message.from_user
        assert user is not None
        user_id = await db.ensure_user(user.id, (user.full_name or "").strip() or str(user.id))
        
        amount = data["amount"]
        category = data["category"]
        tx_type = data["tx_type"]
        description = data.get("description")
        
        await db.add_transaction(
            user_id=user_id,
            tx_type=tx_type,
            amount=amount,
            category=category,
            description=description,
        )
        
        sign = "+" if tx_type == "income" else "-"
        await state.clear()
        await message.answer(
            f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {sign}{amount:.2f} '{category}'",
            reply_markup=MAIN_KB,
        )
        return
    
    if answer == "–Ω–µ—Ç":
        await state.clear()
        await message.answer(
            "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=MAIN_KB,
        )
        return
    
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.", reply_markup=YES_NO_KB)


__all__ = ["router"]
